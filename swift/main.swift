import FFICBindgenTest

let pointerToOpaque = PointerToOpaque.create(times: 3)

pointerToOpaque.sayHello()

let selfTypeTestStruct = SelfTypeTestStruct(times: 3)

selfTypeTestStruct.should_exist_annotated_by_name();
selfTypeTestStruct.should_exist_annotated_mut_by_name();
selfTypeTestStruct.should_exist_annotated_mut_self();
selfTypeTestStruct.should_exist_annotated_self();
selfTypeTestStruct.should_exist_mut_unannotated();

// This function shouldn't be generated by cbindgen, because it's receiver (rust: Box<Self>) is a) not repr(C) and b) an opaque type
// The Swift compiler crashes when trying to generate this method call.
// selfTypeTestStruct.should_not_exist_box();

selfTypeTestStruct.should_exist_ref();
selfTypeTestStruct.should_exist_unannotated();

var mutSelfTypeTestStruct = SelfTypeTestStruct(times: 2)

mutSelfTypeTestStruct.should_exist_ref_mut();

free_function_should_exist_annotated_by_name(test_struct: selfTypeTestStruct);
free_function_should_exist_annotated_mut_by_name(test_struct: selfTypeTestStruct);

// Note - Swift interprets all pointers as UnsafePointer<Type>, so all objects passed via pointer need to be mutable
free_function_should_exist_ref(test_struct: &mutSelfTypeTestStruct);
free_function_should_exist_ref_mut(test_struct: &mutSelfTypeTestStruct);

// Similar to `SelfTypeTestStruct.should_not_exist_box()`, this should not be generated.
// free_function_should_not_exist_box(boxed:);

rust_print_hello_world();